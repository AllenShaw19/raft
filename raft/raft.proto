syntax = "proto3";
import "enum.proto";

package raft;
option go_package = "github.com/AllenShaw19/raft/raft;raft";

message EntryMeta {
  int64 term = 1;
  EntryType type = 2;
  repeated string peers = 3;
  optional int64 data_len = 4;
  // Don't change field id of `old_peers' in the consideration of backward
  // compatibility
  repeated string old_peers = 5;
}

message TermLeader {
  string peer_id = 1;
  int64 term = 2;
}

message RequestVoteRequest {
  string group_id = 1;
  string server_id = 2;
  string peer_id = 3;
  int64 term = 4;
  int64 last_log_term = 5;
  int64 last_log_index = 6;
  optional TermLeader disrupted_leader = 7;
}

message RequestVoteResponse {
  int64 term = 1;
  bool granted = 2;
  optional bool disrupted = 3;
  optional int64 previous_term = 4;
  optional bool rejected_by_lease = 5;
}

message AppendEntriesRequest {
  string group_id = 1;
  string server_id = 2;
  string peer_id = 3;
  int64 term = 4;
  int64 prev_log_term = 5;
  int64 prev_log_index = 6;
  repeated EntryMeta entries = 7;
  int64 committed_index = 8;
}

message AppendEntriesResponse {
  int64 term = 1;
  bool success = 2;
  optional int64 last_log_index = 3;
  optional bool readonly = 4;
}

message SnapshotMeta {
  int64 last_included_index = 1;
  int64 last_included_term = 2;
  repeated string peers = 3;
  repeated string old_peers = 4;
}

message InstallSnapshotRequest {
  string group_id = 1;
  string server_id = 2;
  string peer_id = 3;
  int64 term = 4;
  SnapshotMeta meta = 5;
  string uri = 6;
}

message InstallSnapshotResponse {
  int64 term = 1;
  bool success = 2;
}

message TimeoutNowRequest {
  string group_id = 1;
  string server_id = 2;
  string peer_id = 3;
  int64 term = 4;
  optional bool old_leader_stepped_down = 5;
}

message TimeoutNowResponse {
  int64 term = 1;
  bool success = 2;
}

service RaftService {
  rpc PreVote(RequestVoteRequest) returns (RequestVoteResponse) {}
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse) {}
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {}
  rpc InstallSnapshot(InstallSnapshotRequest) returns (InstallSnapshotResponse) {}
  rpc TimeoutNow(TimeoutNowRequest) returns (TimeoutNowResponse) {}
}