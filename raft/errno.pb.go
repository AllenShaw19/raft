// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: errno.proto

package raft

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RaftError int32

const (
	RaftError_ESUCCESS RaftError = 0
	// All Kinds of Timeout(Including Election_timeout, Timeout_now, Stepdown_timeout)
	RaftError_ERAFTTIMEDOUT RaftError = 10001
	RaftError_ESTATEMACHINE RaftError = 10002 // Bad User State Machine
	RaftError_ECATCHUP      RaftError = 10003 // Catchup Failed
	// Trigger step_down(Not All)
	RaftError_ELEADERREMOVED RaftError = 10004 // Configuration_change_done When
	//Leader Is Not In The New Configuration
	RaftError_ESETPEER            RaftError = 10005 // Set_peer
	RaftError_ENODESHUTDOWN       RaftError = 10006 // Shut_down
	RaftError_EHIGHERTERMREQUEST  RaftError = 10007 // Receive Higher Term Requests
	RaftError_EHIGHERTERMRESPONSE RaftError = 10008 // Receive Higher Term Response
	RaftError_EBADNODE            RaftError = 10009 // Node Is In Error
	RaftError_EVOTEFORCANDIDATE   RaftError = 10010 // Node Votes For Some Candidate
	RaftError_ENEWLEADER          RaftError = 10011 // Follower(without leader) or Candidate Receives
	// Append_entries/Install_snapshot Request from a new leader
	RaftError_ELEADERCONFLICT RaftError = 10012 // More Than One Leader In One Term
	// Trigger on_leader_stop
	RaftError_ETRANSFERLEADERSHIP RaftError = 10013 // Leader Transfer Leadership To A Follower
	// The log at the given index is deleted
	RaftError_ELOGDELETED RaftError = 10014
	// No available user log to read
	RaftError_ENOMOREUSERLOG RaftError = 10015
	// Raft node in readonly mode
	RaftError_EREADONLY RaftError = 10016
	RaftError_EINVAL    RaftError = 10022
	RaftError_EPERM     RaftError = 10023
)

// Enum value maps for RaftError.
var (
	RaftError_name = map[int32]string{
		0:     "ESUCCESS",
		10001: "ERAFTTIMEDOUT",
		10002: "ESTATEMACHINE",
		10003: "ECATCHUP",
		10004: "ELEADERREMOVED",
		10005: "ESETPEER",
		10006: "ENODESHUTDOWN",
		10007: "EHIGHERTERMREQUEST",
		10008: "EHIGHERTERMRESPONSE",
		10009: "EBADNODE",
		10010: "EVOTEFORCANDIDATE",
		10011: "ENEWLEADER",
		10012: "ELEADERCONFLICT",
		10013: "ETRANSFERLEADERSHIP",
		10014: "ELOGDELETED",
		10015: "ENOMOREUSERLOG",
		10016: "EREADONLY",
		10022: "EINVAL",
		10023: "EPERM",
	}
	RaftError_value = map[string]int32{
		"ESUCCESS":            0,
		"ERAFTTIMEDOUT":       10001,
		"ESTATEMACHINE":       10002,
		"ECATCHUP":            10003,
		"ELEADERREMOVED":      10004,
		"ESETPEER":            10005,
		"ENODESHUTDOWN":       10006,
		"EHIGHERTERMREQUEST":  10007,
		"EHIGHERTERMRESPONSE": 10008,
		"EBADNODE":            10009,
		"EVOTEFORCANDIDATE":   10010,
		"ENEWLEADER":          10011,
		"ELEADERCONFLICT":     10012,
		"ETRANSFERLEADERSHIP": 10013,
		"ELOGDELETED":         10014,
		"ENOMOREUSERLOG":      10015,
		"EREADONLY":           10016,
		"EINVAL":              10022,
		"EPERM":               10023,
	}
)

func (x RaftError) Enum() *RaftError {
	p := new(RaftError)
	*p = x
	return p
}

func (x RaftError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RaftError) Descriptor() protoreflect.EnumDescriptor {
	return file_errno_proto_enumTypes[0].Descriptor()
}

func (RaftError) Type() protoreflect.EnumType {
	return &file_errno_proto_enumTypes[0]
}

func (x RaftError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RaftError.Descriptor instead.
func (RaftError) EnumDescriptor() ([]byte, []int) {
	return file_errno_proto_rawDescGZIP(), []int{0}
}

var File_errno_proto protoreflect.FileDescriptor

var file_errno_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x72,
	0x61, 0x66, 0x74, 0x2a, 0xf3, 0x02, 0x0a, 0x09, 0x52, 0x61, 0x66, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0d, 0x45, 0x52, 0x41, 0x46, 0x54, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x4f, 0x55, 0x54,
	0x10, 0x91, 0x4e, 0x12, 0x12, 0x0a, 0x0d, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x41, 0x43,
	0x48, 0x49, 0x4e, 0x45, 0x10, 0x92, 0x4e, 0x12, 0x0d, 0x0a, 0x08, 0x45, 0x43, 0x41, 0x54, 0x43,
	0x48, 0x55, 0x50, 0x10, 0x93, 0x4e, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x4c, 0x45, 0x41, 0x44, 0x45,
	0x52, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x94, 0x4e, 0x12, 0x0d, 0x0a, 0x08, 0x45,
	0x53, 0x45, 0x54, 0x50, 0x45, 0x45, 0x52, 0x10, 0x95, 0x4e, 0x12, 0x12, 0x0a, 0x0d, 0x45, 0x4e,
	0x4f, 0x44, 0x45, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x96, 0x4e, 0x12, 0x17,
	0x0a, 0x12, 0x45, 0x48, 0x49, 0x47, 0x48, 0x45, 0x52, 0x54, 0x45, 0x52, 0x4d, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x97, 0x4e, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x48, 0x49, 0x47, 0x48,
	0x45, 0x52, 0x54, 0x45, 0x52, 0x4d, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x98,
	0x4e, 0x12, 0x0d, 0x0a, 0x08, 0x45, 0x42, 0x41, 0x44, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x99, 0x4e,
	0x12, 0x16, 0x0a, 0x11, 0x45, 0x56, 0x4f, 0x54, 0x45, 0x46, 0x4f, 0x52, 0x43, 0x41, 0x4e, 0x44,
	0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x9a, 0x4e, 0x12, 0x0f, 0x0a, 0x0a, 0x45, 0x4e, 0x45, 0x57,
	0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x9b, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x4c, 0x45,
	0x41, 0x44, 0x45, 0x52, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0x9c, 0x4e, 0x12,
	0x18, 0x0a, 0x13, 0x45, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x4c, 0x45, 0x41, 0x44,
	0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x10, 0x9d, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x45, 0x4c, 0x4f,
	0x47, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x9e, 0x4e, 0x12, 0x13, 0x0a, 0x0e, 0x45,
	0x4e, 0x4f, 0x4d, 0x4f, 0x52, 0x45, 0x55, 0x53, 0x45, 0x52, 0x4c, 0x4f, 0x47, 0x10, 0x9f, 0x4e,
	0x12, 0x0e, 0x0a, 0x09, 0x45, 0x52, 0x45, 0x41, 0x44, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0xa0, 0x4e,
	0x12, 0x0b, 0x0a, 0x06, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x10, 0xa6, 0x4e, 0x12, 0x0a, 0x0a,
	0x05, 0x45, 0x50, 0x45, 0x52, 0x4d, 0x10, 0xa7, 0x4e, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x6c, 0x6c, 0x65, 0x6e, 0x53, 0x68, 0x61,
	0x77, 0x31, 0x39, 0x2f, 0x72, 0x61, 0x66, 0x74, 0x2f, 0x72, 0x61, 0x66, 0x74, 0x3b, 0x72, 0x61,
	0x66, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_errno_proto_rawDescOnce sync.Once
	file_errno_proto_rawDescData = file_errno_proto_rawDesc
)

func file_errno_proto_rawDescGZIP() []byte {
	file_errno_proto_rawDescOnce.Do(func() {
		file_errno_proto_rawDescData = protoimpl.X.CompressGZIP(file_errno_proto_rawDescData)
	})
	return file_errno_proto_rawDescData
}

var file_errno_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_errno_proto_goTypes = []interface{}{
	(RaftError)(0), // 0: raft.RaftError
}
var file_errno_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_errno_proto_init() }
func file_errno_proto_init() {
	if File_errno_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_errno_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_errno_proto_goTypes,
		DependencyIndexes: file_errno_proto_depIdxs,
		EnumInfos:         file_errno_proto_enumTypes,
	}.Build()
	File_errno_proto = out.File
	file_errno_proto_rawDesc = nil
	file_errno_proto_goTypes = nil
	file_errno_proto_depIdxs = nil
}
